#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/outputs.h>
#include <behaviors/mouse_keys.dtsi>
#include <dt-bindings/zmk/ext_power.h>
#include "macros.dtsi"

// / {
//     chosen { zmk,matrix_transform = &default_transform; };
// };

/ {
    /* input config for mouse move mode */

    trackball_listener {
        compatible = "zmk,input-behavior-listener";
        device = <&vtrackball>;
        layers = <0 1 2 3>;
        evt-type = <INPUT_EV_REL>;
        x-input-code = <INPUT_REL_X>;
        y-input-code = <INPUT_REL_Y>;
        scale-multiplier = <1>;
        scale-divisor = <1>;

        // bindings = <&ib_toggle_layer 7>;
    };

    /* input config for snipe mode */

    trackball_snipe_listener {
        compatible = "zmk,input-behavior-listener";
        device = <&vtrackball>;
        layers = <7>;
        evt-type = <INPUT_EV_REL>;
        x-input-code = <INPUT_REL_X>;
        y-input-code = <INPUT_REL_Y>;
        scale-multiplier = <1>;
        scale-divisor = <2>;
    };

    /* input config for mouse scroll mode */

    trackball_scroll_listener {
        compatible = "zmk,input-behavior-listener";
        device = <&vtrackball>;
        layers = <4 5>;
        evt-type = <INPUT_EV_REL>;
        x-input-code = <INPUT_REL_MISC>;
        y-input-code = <INPUT_REL_WHEEL>;
        y-invert;
        bindings = <&ib_wheel_scaler 1 14>;
    };

    /* Cursor pointer */

    ib_axes_to_keys_x: ib_axes_to_keys_x {
        compatible = "zmk,input-behavior-axes-to-keys";
        #binding-cells = <0>;
        evt-type = <INPUT_EV_REL>;
        input-code = <INPUT_REL_X>;
        negative-binding = <&kp LEFT_ARROW>;
        positive-binding = <&kp RIGHT_ARROW>;
    };

    ib_axes_to_keys_y: ib_axes_to_keys_y {
        compatible = "zmk,input-behavior-axes-to-keys";
        #binding-cells = <0>;
        evt-type = <INPUT_EV_REL>;
        input-code = <INPUT_REL_Y>;
        negative-binding = <&kp UP_ARROW>;
        positive-binding = <&kp DOWN_ARROW>;
    };

    trackball_cursor_listener {
        compatible = "zmk,input-behavior-listener";
        device = <&vtrackball>;
        layers = <6>;
        evt-type = <INPUT_EV_REL>;
        x-input-code = <INPUT_REL_X>;
        y-input-code = <INPUT_REL_Y>;
        // Sensitivity
        scale-multiplier = <1>;
        scale-divisor = <3>;
        bindings = <&ib_axes_to_keys_x &ib_axes_to_keys_y>;
    };

    /* define a resolution down scaler only for INPUT_REL_WHEEL */

    ib_wheel_scaler: ib_wheel_scaler {
        compatible = "zmk,input-behavior-scaler";
        #binding-cells = <2>;
        evt-type = <INPUT_EV_REL>;
        input-code = <INPUT_REL_WHEEL>;
    };

    /* adjust cooldown waiting period for mouse key layer after activated */

    ib_toggle_layer: ib_toggle_layer {
        compatible = "zmk,input-behavior-tog-layer";
        #binding-cells = <1>;
        time-to-live-ms = <750>;
    };

    #define DEF 0
#define MOD 1
#define INT 2

    combos {
        compatible = "zmk,combos";

        CurlyL {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <14 15>;
            layers = <4>;
        };

        CurlyR {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <20 21>;
            layers = <4>;
        };

        ParenthesisL {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <26 27>;
            layers = <4>;
        };

        ParenthesisR {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <32 33>;
            layers = <4>;
        };

        BraketL {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <38 39>;
            layers = <4>;
        };

        BraketR {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <44 45>;
            layers = <4>;
        };

        TriangleL {
            bindings = <&kp LESS_THAN>;
            key-positions = <25 26>;
            layers = <4>;
        };

        TriangleR {
            bindings = <&kp GREATER_THAN>;
            key-positions = <33 34>;
            layers = <4>;
        };
    };

    macros {
        languages_pack_1: languages_pack_1 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(LG(N7)) &kp LG(LA(N8))>;
            label = "LANGUAGES_PACK_1";
        };

        language_pack_2: language_pack_2 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(LG(N7)) &kp LG(LA(N9))>;
            label = "LANGUAGE_PACK_2";
        };

        language_pack_3: language_pack_3 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(LG(N8)) &kp LG(LA(NUMBER_6))>;
            label = "LANGUAGE_PACK_3";
        };

        language_pack_4: language_pack_4 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(LG(N7)) &kp LG(LA(N6))>;
            label = "LANGUAGE_PACK_4";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        DEF {
            bindings = <
&kp ESC     &kp NUMBER_1  &kp N2  &kp N3  &kp N4  &kp N5       &kp N6     &kp N7     &kp N8     &kp N9   &kp N0     &mo 7
&kp TAB     &kp Q         &kp W   &kp E   &kp R   &kp T        &kp Y      &kp U      &kp I      &kp O    &kp P      &kp APOSTROPHE
&kp LSHIFT  &kp A         &kp S   &kp D   &kp F   &kp G        &kp H      &kp J      &kp K      &kp L    &kp SEMI   &kp RIGHT_SHIFT
&kp LCTRL   &kp Z         &kp X   &kp C   &kp V   &kp B        &kp N      &kp M      &kp COMMA  &kp DOT  &kp SLASH  &kp LEFT_ALT
                                  &mo 7   &mo 4   &kp ENTER    &kp LCTRL  &kp SPACE
                                          &mo 6   &sl 7        &kp LGUI
            >;
        };

        GAME {
            bindings = <
&trans  &trans  &trans  &trans     &trans        &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans     &trans        &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans     &trans        &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans     &trans        &trans    &trans  &trans  &trans  &trans  &trans  &trans
                        &kp SPACE  &trans        &trans    &trans  &trans
                                   &kp LEFT_ALT  &trans    &trans
            >;
        };

        SHOOTER {
            bindings = <
&kp ESCAPE  &kp NUMBER_1    &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4  &kp NUMBER_5    &trans  &trans  &trans  &trans  &trans  &trans
&kp T       &kp TAB         &kp Q         &kp W         &kp E         &kp R           &trans  &trans  &trans  &trans  &trans  &trans
&kp G       &kp LEFT_SHIFT  &kp A         &kp S         &kp D         &kp F           &trans  &trans  &trans  &trans  &trans  &trans
&kp B       &kp LCTRL       &kp Z         &kp X         &kp C         &kp V           &trans  &trans  &trans  &trans  &trans  &trans
                                          &kp SPACE     &trans        &trans          &trans  &trans
                                                        &kp LEFT_ALT  &trans          &trans
            >;
        };

        ANDROID {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &mo 5   &trans    &trans  &trans
                                &trans  &trans    &trans
            >;
        };

        MOD {
            bindings = <
&trans  &kp F1      &kp F2             &kp F3           &kp F4         &kp F5               &kp F6     &kp F7     &kp F8    &kp F9     &kp F10        &kp F11
&trans  &kp LA(F4)  &kp C_VOLUME_UP    &kp C_PREVIOUS   &kp C_NEXT     &kp GRAVE            &kp PG_UP  &kp HOME   &kp UP    &kp END    &kp DEL        &kp F12
&trans  &caps_word  &kp C_PLAY_PAUSE   &kp SPACE        &kp LG(SPACE)  &trans               &kp PG_DN  &kp LEFT   &kp DOWN  &kp RIGHT  &kp BACKSPACE  &kp RIGHT_BRACE
&trans  &trans      &kp C_VOLUME_DOWN  &kp PRINTSCREEN  &kp LC(F12)    &kp LG(PAGE_DOWN)    &kp EQUAL  &kp MINUS  &kp LBKT  &kp RBKT   &kp BACKSLASH  &trans
                                       &trans           &trans         &trans               &trans     &trans
                                                        &trans         &trans               &trans
            >;
        };

        MOD_ANDROID {
            bindings = <
&trans  &kp F1      &kp F2             &kp F3           &kp F4         &kp F5               &kp F6     &kp F7     &kp F8    &kp F9     &kp F10        &kp F11
&trans  &kp LA(F4)  &kp C_VOLUME_UP    &kp C_PREVIOUS   &kp C_NEXT     &kp GRAVE            &kp PG_UP  &kp HOME   &kp UP    &kp END    &kp DEL        &kp F12
&trans  &caps_word  &kp C_PLAY_PAUSE   &kp SPACE        &kp LC(SPACE)  &trans               &kp PG_DN  &kp LEFT   &kp DOWN  &kp RIGHT  &kp BACKSPACE  &kp RIGHT_BRACE
&trans  &trans      &kp C_VOLUME_DOWN  &kp PRINTSCREEN  &kp LC(F12)    &kp LG(PAGE_DOWN)    &kp EQUAL  &kp MINUS  &kp LBKT  &kp RBKT   &kp BACKSLASH  &trans
                                       &trans           &trans         &trans               &trans     &trans
                                                        &trans         &trans               &trans
            >;
        };

        PROG {
            bindings = <
&none  &none                    &none           &none          &none         &none                &none           &none  &none  &none  &none  &none
&none  &kp LC(LS(F4))           &kp LA(LS(L))   &kp LA(J)      &none         &kp LC(LA(S))        &kp LA(LS(F4))  &none  &none  &none  &none  &none
&none  &kp LA(LC(LEFT_ARROW))   &kp LC(LA(B))   &kp LS(LA(V))  &kp LEFT_ALT  &kp LA(ENTER)        &kp LA(LC(T))   &none  &none  &none  &none  &none
&none  &kp LC(LA(RIGHT_ARROW))  &kp LA(INSERT)  &kp LS(F6)     &none         &kp LA(LC(LS(S)))    &none           &none  &none  &none  &none  &studio_unlock
                                                &none          &none         &none                &none           &none
                                                               &none         &none                &none
            >;
        };

        SUPER {
            bindings = <
&none           &tog 1             &tog 2            &tog 3            &none             &none    &bt BT_SEL 0     &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4   &none
&none           &languages_pack_1  &language_pack_2  &language_pack_3  &language_pack_4  &none    &kp KP_PLUS      &kp N7        &kp N8        &kp N9        &kp KP_DIVIDE  &none
&kp LEFT_SHIFT  &none              &mkp MCLK         &mkp LCLK         &mkp RCLK         &none    &kp KP_MINUS     &kp N4        &kp N5        &kp N6        &kp N0         &none
&kp LCTRL       &none              &none             &none             &none             &none    &kp KP_MULTIPLY  &kp N1        &kp N2        &kp N3        &kp DOT        &none
                                                     &none             &none             &none    &none            &none
                                                                       &none             &none    &none
            >;
        };
    };
};
