#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/outputs.h>
#include <behaviors/mouse_keys.dtsi>
#include <dt-bindings/zmk/ext_power.h>
#include "macros.dtsi"

// / {
//     chosen { zmk,matrix_transform = &default_transform; };
// };

/ {
    /* input config for mouse move mode */

    trackball_listener {
        compatible = "zmk,input-behavior-listener";
        device = <&vtrackball>;
        layers = <0 1>;
        evt-type = <INPUT_EV_REL>;
        x-input-code = <INPUT_REL_X>;
        y-input-code = <INPUT_REL_Y>;
        scale-multiplier = <1>;
        scale-divisor = <2>;

        // bindings = <&ib_toggle_layer 7>;
    };

    /* input config for snipe mode */

    trackball_snipe_listener {
        compatible = "zmk,input-behavior-listener";
        device = <&vtrackball>;
        layers = <3>;
        evt-type = <INPUT_EV_REL>;
        x-input-code = <INPUT_REL_X>;
        y-input-code = <INPUT_REL_Y>;
        scale-multiplier = <1>;
        scale-divisor = <4>;
    };

    /* input config for mouse scroll mode */

    trackball_scroll_listener {
        compatible = "zmk,input-behavior-listener";
        device = <&vtrackball>;
        layers = <2>;
        evt-type = <INPUT_EV_REL>;
        x-input-code = <INPUT_REL_MISC>;
        y-input-code = <INPUT_REL_WHEEL>;
        y-invert;
        bindings = <&ib_wheel_scaler 1 14>;
    };

    /* define a resolution down scaler only for INPUT_REL_WHEEL */

    ib_wheel_scaler: ib_wheel_scaler {
        compatible = "zmk,input-behavior-scaler";
        #binding-cells = <2>;
        evt-type = <INPUT_EV_REL>;
        input-code = <INPUT_REL_WHEEL>;
    };

    /* adjust cooldown waiting period for mouse key layer after activated */

    ib_toggle_layer: ib_toggle_layer {
        compatible = "zmk,input-behavior-tog-layer";
        #binding-cells = <1>;
        time-to-live-ms = <750>;
    };

    #define DEF 0
#define MOD 1
#define INT 2

    combos {
        compatible = "zmk,combos";

        CurlyL {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <14 15>;
            layers = <2>;
        };

        CurlyR {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <20 21>;
            layers = <2>;
        };

        ParenthesisL {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <26 27>;
            layers = <2>;
        };

        ParenthesisR {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <32 33>;
            layers = <2>;
        };

        BraketL {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <38 39>;
            layers = <2>;
        };

        BraketR {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <44 45>;
            layers = <2>;
        };

        ToogleGame {
            bindings = <&tog 1>;
            key-positions = <47 46>;
            layers = <2>;
        };

        TriangleL {
            bindings = <&kp LESS_THAN>;
            key-positions = <25 26>;
            layers = <2>;
        };

        TriangleR {
            bindings = <&kp GREATER_THAN>;
            key-positions = <33 34>;
            layers = <2>;
        };
    };

    macros {
        languages_pack_1: languages_pack_1 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(LG(N7)) &kp LG(LA(N8))>;
            label = "LANGUAGES_PACK_1";
        };

        language_pack_2: language_pack_2 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(LG(N7)) &kp LG(LA(N9))>;
            label = "LANGUAGE_PACK_2";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        DEF {
            bindings = <
&kp ESC     &kp NUMBER_1  &kp N2  &kp N3     &kp N4  &kp N5       &kp N6     &kp N7     &kp N8     &kp N9   &kp N0     &mo 4
&kp TAB     &kp Q         &kp W   &kp E      &kp R   &kp T        &kp Y      &kp U      &kp I      &kp O    &kp P      &kp APOSTROPHE
&kp LSHIFT  &kp A         &kp S   &kp D      &kp F   &kp G        &kp H      &kp J      &kp K      &kp L    &kp SEMI   &kp RIGHT_SHIFT
&kp LCTRL   &kp Z         &kp X   &kp C      &kp V   &kp B        &kp N      &kp M      &kp COMMA  &kp DOT  &kp SLASH  &kp LEFT_ALT
                                  &mkp LCLK  &mo 2   &kp ENTER    &kp LCTRL  &kp SPACE
                                             &mo 3   &sl 4        &kp LGUI
            >;
        };

        GAME {
            bindings = <
&trans  &trans  &trans  &trans        &trans     &trans       &trans     &trans     &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans        &trans     &trans       &trans     &trans     &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans        &trans     &trans       &trans     &trans     &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans        &trans     &trans       &trans     &trans     &trans  &trans  &trans  &trans
                        &kp LEFT_ALT  &kp SPACE  &kp LCTRL    &kp ENTER  &kp SPACE
                                      &mo 2      &mkp LCLK    &kp LGUI
            >;
        };

        MOD {
            bindings = <
&trans  &kp F1      &kp F2             &kp F3             &kp F4            &kp F5               &kp F6     &kp F7     &kp F8    &kp F9     &kp F10        &kp F11
&trans  &kp LA(F4)  &kp C_VOLUME_UP    &languages_pack_1  &language_pack_2  &kp GRAVE            &kp PG_UP  &kp HOME   &kp UP    &kp END    &kp DEL        &kp F12
&trans  &caps_word  &kp C_PLAY_PAUSE   &trans             &kp LG(SPACE)     &trans               &kp PG_DN  &kp LEFT   &kp DOWN  &kp RIGHT  &kp BACKSPACE  &kp RIGHT_BRACE
&trans  &kp C_NEXT  &kp C_VOLUME_DOWN  &kp PRINTSCREEN    &kp LC(F12)       &kp LG(PAGE_DOWN)    &kp EQUAL  &kp MINUS  &kp LBKT  &kp RBKT   &kp BACKSLASH  &tog 1
                                       &trans             &trans            &trans               &trans     &trans
                                                          &trans            &trans               &trans
            >;
        };

        PROG {
            bindings = <
&none  &none                    &none           &none          &none         &none                &none           &none  &none  &none  &none  &none
&none  &kp LC(LS(F4))           &kp LA(LS(L))   &kp LA(J)      &none         &kp LC(LA(S))        &kp LA(LS(F4))  &none  &none  &none  &none  &none
&none  &kp LA(LC(LEFT_ARROW))   &kp LC(LA(B))   &kp LS(LA(V))  &kp LEFT_ALT  &kp LA(ENTER)        &kp LA(LC(T))   &none  &none  &none  &none  &none
&none  &kp LC(LA(RIGHT_ARROW))  &kp LA(INSERT)  &kp LS(F6)     &none         &kp LA(LC(LS(S)))    &none           &none  &none  &none  &none  &studio_unlock
                                                &none          &none         &none                &none           &none
                                                               &none         &none                &none
            >;
        };

        SUPER {
            bindings = <
&trans  &trans  &trans  &trans     &trans     &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans     &trans     &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans     &trans     &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &mkp RCLK  &mkp LCLK  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans     &trans     &trans    &trans  &trans
                                   &trans     &trans    &trans
            >;
        };
    };
};
